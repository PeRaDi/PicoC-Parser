Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Rec
Rule 1     Rec -> Instrucao
Rule 2     Rec -> Rec Instrucao
Rule 3     Instrucao -> ifStatement
Rule 4     Instrucao -> whileLoop
Rule 5     Instrucao -> atrib
Rule 6     Instrucao -> nr
Rule 7     atrib -> int var ;
Rule 8     atrib -> string var ;
Rule 9     atrib -> int var = exp ;
Rule 10    atrib -> string var = str ;
Rule 11    atrib -> var = exp ;
Rule 12    exp -> var
Rule 13    exp -> nr
Rule 14    exp -> exp + exp
Rule 15    exp -> exp - exp
Rule 16    exp -> exp * exp
Rule 17    exp -> exp / exp
Rule 18    exp -> - exp
Rule 19    exp -> ( exp )
Rule 20    ifStatement -> if ( cond ) then Instrucao end
Rule 21    ifStatement -> if ( cond ) then Instrucao else Instrucao end
Rule 22    cond -> exp > exp
Rule 23    cond -> exp < exp
Rule 24    cond -> exp isEqual exp
Rule 25    cond -> exp isNotEqual exp
Rule 26    cond -> exp isEqualOrGreater exp
Rule 27    cond -> exp isEqualOrLess exp
Rule 28    cond -> exp
Rule 29    whileLoop -> while ( cond ) then Instrucao end

Terminals, with rules where they appear

(                    : 19 20 21 29
)                    : 19 20 21 29
*                    : 16
+                    : 14
-                    : 15 18
/                    : 17
;                    : 7 8 9 10 11
<                    : 23
=                    : 9 10 11
>                    : 22
else                 : 21
end                  : 20 21 29
error                : 
if                   : 20 21
int                  : 7 9
isEqual              : 24
isEqualOrGreater     : 26
isEqualOrLess        : 27
isNotEqual           : 25
nr                   : 6 13
str                  : 10
string               : 8 10
then                 : 20 21 29
var                  : 7 8 9 10 11 12
while                : 29

Nonterminals, with rules where they appear

Instrucao            : 1 2 20 21 21 29
Rec                  : 2 0
atrib                : 5
cond                 : 20 21 29
exp                  : 9 11 14 14 15 15 16 16 17 17 18 19 22 22 23 23 24 24 25 25 26 26 27 27 28
ifStatement          : 3
whileLoop            : 4

Parsing method: LALR

state 0

    (0) S' -> . Rec
    (1) Rec -> . Instrucao
    (2) Rec -> . Rec Instrucao
    (3) Instrucao -> . ifStatement
    (4) Instrucao -> . whileLoop
    (5) Instrucao -> . atrib
    (6) Instrucao -> . nr
    (20) ifStatement -> . if ( cond ) then Instrucao end
    (21) ifStatement -> . if ( cond ) then Instrucao else Instrucao end
    (29) whileLoop -> . while ( cond ) then Instrucao end
    (7) atrib -> . int var ;
    (8) atrib -> . string var ;
    (9) atrib -> . int var = exp ;
    (10) atrib -> . string var = str ;
    (11) atrib -> . var = exp ;

    nr              shift and go to state 6
    if              shift and go to state 7
    while           shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 11
    var             shift and go to state 10

    Rec                            shift and go to state 1
    Instrucao                      shift and go to state 2
    ifStatement                    shift and go to state 3
    whileLoop                      shift and go to state 4
    atrib                          shift and go to state 5

state 1

    (0) S' -> Rec .
    (2) Rec -> Rec . Instrucao
    (3) Instrucao -> . ifStatement
    (4) Instrucao -> . whileLoop
    (5) Instrucao -> . atrib
    (6) Instrucao -> . nr
    (20) ifStatement -> . if ( cond ) then Instrucao end
    (21) ifStatement -> . if ( cond ) then Instrucao else Instrucao end
    (29) whileLoop -> . while ( cond ) then Instrucao end
    (7) atrib -> . int var ;
    (8) atrib -> . string var ;
    (9) atrib -> . int var = exp ;
    (10) atrib -> . string var = str ;
    (11) atrib -> . var = exp ;

    nr              shift and go to state 6
    if              shift and go to state 7
    while           shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 11
    var             shift and go to state 10

    Instrucao                      shift and go to state 12
    ifStatement                    shift and go to state 3
    whileLoop                      shift and go to state 4
    atrib                          shift and go to state 5

state 2

    (1) Rec -> Instrucao .

    nr              reduce using rule 1 (Rec -> Instrucao .)
    if              reduce using rule 1 (Rec -> Instrucao .)
    while           reduce using rule 1 (Rec -> Instrucao .)
    int             reduce using rule 1 (Rec -> Instrucao .)
    string          reduce using rule 1 (Rec -> Instrucao .)
    var             reduce using rule 1 (Rec -> Instrucao .)
    $end            reduce using rule 1 (Rec -> Instrucao .)


state 3

    (3) Instrucao -> ifStatement .

    nr              reduce using rule 3 (Instrucao -> ifStatement .)
    if              reduce using rule 3 (Instrucao -> ifStatement .)
    while           reduce using rule 3 (Instrucao -> ifStatement .)
    int             reduce using rule 3 (Instrucao -> ifStatement .)
    string          reduce using rule 3 (Instrucao -> ifStatement .)
    var             reduce using rule 3 (Instrucao -> ifStatement .)
    $end            reduce using rule 3 (Instrucao -> ifStatement .)
    end             reduce using rule 3 (Instrucao -> ifStatement .)
    else            reduce using rule 3 (Instrucao -> ifStatement .)


state 4

    (4) Instrucao -> whileLoop .

    nr              reduce using rule 4 (Instrucao -> whileLoop .)
    if              reduce using rule 4 (Instrucao -> whileLoop .)
    while           reduce using rule 4 (Instrucao -> whileLoop .)
    int             reduce using rule 4 (Instrucao -> whileLoop .)
    string          reduce using rule 4 (Instrucao -> whileLoop .)
    var             reduce using rule 4 (Instrucao -> whileLoop .)
    $end            reduce using rule 4 (Instrucao -> whileLoop .)
    end             reduce using rule 4 (Instrucao -> whileLoop .)
    else            reduce using rule 4 (Instrucao -> whileLoop .)


state 5

    (5) Instrucao -> atrib .

    nr              reduce using rule 5 (Instrucao -> atrib .)
    if              reduce using rule 5 (Instrucao -> atrib .)
    while           reduce using rule 5 (Instrucao -> atrib .)
    int             reduce using rule 5 (Instrucao -> atrib .)
    string          reduce using rule 5 (Instrucao -> atrib .)
    var             reduce using rule 5 (Instrucao -> atrib .)
    $end            reduce using rule 5 (Instrucao -> atrib .)
    end             reduce using rule 5 (Instrucao -> atrib .)
    else            reduce using rule 5 (Instrucao -> atrib .)


state 6

    (6) Instrucao -> nr .

    nr              reduce using rule 6 (Instrucao -> nr .)
    if              reduce using rule 6 (Instrucao -> nr .)
    while           reduce using rule 6 (Instrucao -> nr .)
    int             reduce using rule 6 (Instrucao -> nr .)
    string          reduce using rule 6 (Instrucao -> nr .)
    var             reduce using rule 6 (Instrucao -> nr .)
    $end            reduce using rule 6 (Instrucao -> nr .)
    end             reduce using rule 6 (Instrucao -> nr .)
    else            reduce using rule 6 (Instrucao -> nr .)


state 7

    (20) ifStatement -> if . ( cond ) then Instrucao end
    (21) ifStatement -> if . ( cond ) then Instrucao else Instrucao end

    (               shift and go to state 13


state 8

    (29) whileLoop -> while . ( cond ) then Instrucao end

    (               shift and go to state 14


state 9

    (7) atrib -> int . var ;
    (9) atrib -> int . var = exp ;

    var             shift and go to state 15


state 10

    (11) atrib -> var . = exp ;

    =               shift and go to state 16


state 11

    (8) atrib -> string . var ;
    (10) atrib -> string . var = str ;

    var             shift and go to state 17


state 12

    (2) Rec -> Rec Instrucao .

    nr              reduce using rule 2 (Rec -> Rec Instrucao .)
    if              reduce using rule 2 (Rec -> Rec Instrucao .)
    while           reduce using rule 2 (Rec -> Rec Instrucao .)
    int             reduce using rule 2 (Rec -> Rec Instrucao .)
    string          reduce using rule 2 (Rec -> Rec Instrucao .)
    var             reduce using rule 2 (Rec -> Rec Instrucao .)
    $end            reduce using rule 2 (Rec -> Rec Instrucao .)


state 13

    (20) ifStatement -> if ( . cond ) then Instrucao end
    (21) ifStatement -> if ( . cond ) then Instrucao else Instrucao end
    (22) cond -> . exp > exp
    (23) cond -> . exp < exp
    (24) cond -> . exp isEqual exp
    (25) cond -> . exp isNotEqual exp
    (26) cond -> . exp isEqualOrGreater exp
    (27) cond -> . exp isEqualOrLess exp
    (28) cond -> . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    cond                           shift and go to state 19
    exp                            shift and go to state 20

state 14

    (29) whileLoop -> while ( . cond ) then Instrucao end
    (22) cond -> . exp > exp
    (23) cond -> . exp < exp
    (24) cond -> . exp isEqual exp
    (25) cond -> . exp isNotEqual exp
    (26) cond -> . exp isEqualOrGreater exp
    (27) cond -> . exp isEqualOrLess exp
    (28) cond -> . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    cond                           shift and go to state 24
    exp                            shift and go to state 20

state 15

    (7) atrib -> int var . ;
    (9) atrib -> int var . = exp ;

    ;               shift and go to state 25
    =               shift and go to state 26


state 16

    (11) atrib -> var = . exp ;
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 27

state 17

    (8) atrib -> string var . ;
    (10) atrib -> string var . = str ;

    ;               shift and go to state 28
    =               shift and go to state 29


state 18

    (19) exp -> ( . exp )
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 30

state 19

    (20) ifStatement -> if ( cond . ) then Instrucao end
    (21) ifStatement -> if ( cond . ) then Instrucao else Instrucao end

    )               shift and go to state 31


state 20

    (22) cond -> exp . > exp
    (23) cond -> exp . < exp
    (24) cond -> exp . isEqual exp
    (25) cond -> exp . isNotEqual exp
    (26) cond -> exp . isEqualOrGreater exp
    (27) cond -> exp . isEqualOrLess exp
    (28) cond -> exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               shift and go to state 32
    <               shift and go to state 33
    isEqual         shift and go to state 34
    isNotEqual      shift and go to state 35
    isEqualOrGreater shift and go to state 36
    isEqualOrLess   shift and go to state 37
    )               reduce using rule 28 (cond -> exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 21

    (12) exp -> var .

    >               reduce using rule 12 (exp -> var .)
    <               reduce using rule 12 (exp -> var .)
    isEqual         reduce using rule 12 (exp -> var .)
    isNotEqual      reduce using rule 12 (exp -> var .)
    isEqualOrGreater reduce using rule 12 (exp -> var .)
    isEqualOrLess   reduce using rule 12 (exp -> var .)
    +               reduce using rule 12 (exp -> var .)
    -               reduce using rule 12 (exp -> var .)
    *               reduce using rule 12 (exp -> var .)
    /               reduce using rule 12 (exp -> var .)
    )               reduce using rule 12 (exp -> var .)
    ;               reduce using rule 12 (exp -> var .)


state 22

    (13) exp -> nr .

    >               reduce using rule 13 (exp -> nr .)
    <               reduce using rule 13 (exp -> nr .)
    isEqual         reduce using rule 13 (exp -> nr .)
    isNotEqual      reduce using rule 13 (exp -> nr .)
    isEqualOrGreater reduce using rule 13 (exp -> nr .)
    isEqualOrLess   reduce using rule 13 (exp -> nr .)
    +               reduce using rule 13 (exp -> nr .)
    -               reduce using rule 13 (exp -> nr .)
    *               reduce using rule 13 (exp -> nr .)
    /               reduce using rule 13 (exp -> nr .)
    )               reduce using rule 13 (exp -> nr .)
    ;               reduce using rule 13 (exp -> nr .)


state 23

    (18) exp -> - . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 42

state 24

    (29) whileLoop -> while ( cond . ) then Instrucao end

    )               shift and go to state 43


state 25

    (7) atrib -> int var ; .

    nr              reduce using rule 7 (atrib -> int var ; .)
    if              reduce using rule 7 (atrib -> int var ; .)
    while           reduce using rule 7 (atrib -> int var ; .)
    int             reduce using rule 7 (atrib -> int var ; .)
    string          reduce using rule 7 (atrib -> int var ; .)
    var             reduce using rule 7 (atrib -> int var ; .)
    $end            reduce using rule 7 (atrib -> int var ; .)
    end             reduce using rule 7 (atrib -> int var ; .)
    else            reduce using rule 7 (atrib -> int var ; .)


state 26

    (9) atrib -> int var = . exp ;
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 44

state 27

    (11) atrib -> var = exp . ;
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    ;               shift and go to state 45
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 28

    (8) atrib -> string var ; .

    nr              reduce using rule 8 (atrib -> string var ; .)
    if              reduce using rule 8 (atrib -> string var ; .)
    while           reduce using rule 8 (atrib -> string var ; .)
    int             reduce using rule 8 (atrib -> string var ; .)
    string          reduce using rule 8 (atrib -> string var ; .)
    var             reduce using rule 8 (atrib -> string var ; .)
    $end            reduce using rule 8 (atrib -> string var ; .)
    end             reduce using rule 8 (atrib -> string var ; .)
    else            reduce using rule 8 (atrib -> string var ; .)


state 29

    (10) atrib -> string var = . str ;

    str             shift and go to state 46


state 30

    (19) exp -> ( exp . )
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               shift and go to state 47
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 31

    (20) ifStatement -> if ( cond ) . then Instrucao end
    (21) ifStatement -> if ( cond ) . then Instrucao else Instrucao end

    then            shift and go to state 48


state 32

    (22) cond -> exp > . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 49

state 33

    (23) cond -> exp < . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 50

state 34

    (24) cond -> exp isEqual . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 51

state 35

    (25) cond -> exp isNotEqual . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 52

state 36

    (26) cond -> exp isEqualOrGreater . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 53

state 37

    (27) cond -> exp isEqualOrLess . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 54

state 38

    (14) exp -> exp + . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 55

state 39

    (15) exp -> exp - . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 56

state 40

    (16) exp -> exp * . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 57

state 41

    (17) exp -> exp / . exp
    (12) exp -> . var
    (13) exp -> . nr
    (14) exp -> . exp + exp
    (15) exp -> . exp - exp
    (16) exp -> . exp * exp
    (17) exp -> . exp / exp
    (18) exp -> . - exp
    (19) exp -> . ( exp )

    var             shift and go to state 21
    nr              shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 18

    exp                            shift and go to state 58

state 42

    (18) exp -> - exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               reduce using rule 18 (exp -> - exp .)
    <               reduce using rule 18 (exp -> - exp .)
    isEqual         reduce using rule 18 (exp -> - exp .)
    isNotEqual      reduce using rule 18 (exp -> - exp .)
    isEqualOrGreater reduce using rule 18 (exp -> - exp .)
    isEqualOrLess   reduce using rule 18 (exp -> - exp .)
    +               reduce using rule 18 (exp -> - exp .)
    -               reduce using rule 18 (exp -> - exp .)
    *               reduce using rule 18 (exp -> - exp .)
    /               reduce using rule 18 (exp -> - exp .)
    )               reduce using rule 18 (exp -> - exp .)
    ;               reduce using rule 18 (exp -> - exp .)

  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]


state 43

    (29) whileLoop -> while ( cond ) . then Instrucao end

    then            shift and go to state 59


state 44

    (9) atrib -> int var = exp . ;
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    ;               shift and go to state 60
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 45

    (11) atrib -> var = exp ; .

    nr              reduce using rule 11 (atrib -> var = exp ; .)
    if              reduce using rule 11 (atrib -> var = exp ; .)
    while           reduce using rule 11 (atrib -> var = exp ; .)
    int             reduce using rule 11 (atrib -> var = exp ; .)
    string          reduce using rule 11 (atrib -> var = exp ; .)
    var             reduce using rule 11 (atrib -> var = exp ; .)
    $end            reduce using rule 11 (atrib -> var = exp ; .)
    end             reduce using rule 11 (atrib -> var = exp ; .)
    else            reduce using rule 11 (atrib -> var = exp ; .)


state 46

    (10) atrib -> string var = str . ;

    ;               shift and go to state 61


state 47

    (19) exp -> ( exp ) .

    >               reduce using rule 19 (exp -> ( exp ) .)
    <               reduce using rule 19 (exp -> ( exp ) .)
    isEqual         reduce using rule 19 (exp -> ( exp ) .)
    isNotEqual      reduce using rule 19 (exp -> ( exp ) .)
    isEqualOrGreater reduce using rule 19 (exp -> ( exp ) .)
    isEqualOrLess   reduce using rule 19 (exp -> ( exp ) .)
    +               reduce using rule 19 (exp -> ( exp ) .)
    -               reduce using rule 19 (exp -> ( exp ) .)
    *               reduce using rule 19 (exp -> ( exp ) .)
    /               reduce using rule 19 (exp -> ( exp ) .)
    )               reduce using rule 19 (exp -> ( exp ) .)
    ;               reduce using rule 19 (exp -> ( exp ) .)


state 48

    (20) ifStatement -> if ( cond ) then . Instrucao end
    (21) ifStatement -> if ( cond ) then . Instrucao else Instrucao end
    (3) Instrucao -> . ifStatement
    (4) Instrucao -> . whileLoop
    (5) Instrucao -> . atrib
    (6) Instrucao -> . nr
    (20) ifStatement -> . if ( cond ) then Instrucao end
    (21) ifStatement -> . if ( cond ) then Instrucao else Instrucao end
    (29) whileLoop -> . while ( cond ) then Instrucao end
    (7) atrib -> . int var ;
    (8) atrib -> . string var ;
    (9) atrib -> . int var = exp ;
    (10) atrib -> . string var = str ;
    (11) atrib -> . var = exp ;

    nr              shift and go to state 6
    if              shift and go to state 7
    while           shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 11
    var             shift and go to state 10

    Instrucao                      shift and go to state 62
    ifStatement                    shift and go to state 3
    whileLoop                      shift and go to state 4
    atrib                          shift and go to state 5

state 49

    (22) cond -> exp > exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 22 (cond -> exp > exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 50

    (23) cond -> exp < exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 23 (cond -> exp < exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 51

    (24) cond -> exp isEqual exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 24 (cond -> exp isEqual exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 52

    (25) cond -> exp isNotEqual exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 25 (cond -> exp isNotEqual exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 53

    (26) cond -> exp isEqualOrGreater exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 26 (cond -> exp isEqualOrGreater exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 54

    (27) cond -> exp isEqualOrLess exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    )               reduce using rule 27 (cond -> exp isEqualOrLess exp .)
    +               shift and go to state 38
    -               shift and go to state 39
    *               shift and go to state 40
    /               shift and go to state 41


state 55

    (14) exp -> exp + exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               reduce using rule 14 (exp -> exp + exp .)
    <               reduce using rule 14 (exp -> exp + exp .)
    isEqual         reduce using rule 14 (exp -> exp + exp .)
    isNotEqual      reduce using rule 14 (exp -> exp + exp .)
    isEqualOrGreater reduce using rule 14 (exp -> exp + exp .)
    isEqualOrLess   reduce using rule 14 (exp -> exp + exp .)
    +               reduce using rule 14 (exp -> exp + exp .)
    -               reduce using rule 14 (exp -> exp + exp .)
    )               reduce using rule 14 (exp -> exp + exp .)
    ;               reduce using rule 14 (exp -> exp + exp .)
    *               shift and go to state 40
    /               shift and go to state 41

  ! *               [ reduce using rule 14 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 14 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]


state 56

    (15) exp -> exp - exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               reduce using rule 15 (exp -> exp - exp .)
    <               reduce using rule 15 (exp -> exp - exp .)
    isEqual         reduce using rule 15 (exp -> exp - exp .)
    isNotEqual      reduce using rule 15 (exp -> exp - exp .)
    isEqualOrGreater reduce using rule 15 (exp -> exp - exp .)
    isEqualOrLess   reduce using rule 15 (exp -> exp - exp .)
    +               reduce using rule 15 (exp -> exp - exp .)
    -               reduce using rule 15 (exp -> exp - exp .)
    )               reduce using rule 15 (exp -> exp - exp .)
    ;               reduce using rule 15 (exp -> exp - exp .)
    *               shift and go to state 40
    /               shift and go to state 41

  ! *               [ reduce using rule 15 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 15 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]


state 57

    (16) exp -> exp * exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               reduce using rule 16 (exp -> exp * exp .)
    <               reduce using rule 16 (exp -> exp * exp .)
    isEqual         reduce using rule 16 (exp -> exp * exp .)
    isNotEqual      reduce using rule 16 (exp -> exp * exp .)
    isEqualOrGreater reduce using rule 16 (exp -> exp * exp .)
    isEqualOrLess   reduce using rule 16 (exp -> exp * exp .)
    +               reduce using rule 16 (exp -> exp * exp .)
    -               reduce using rule 16 (exp -> exp * exp .)
    *               reduce using rule 16 (exp -> exp * exp .)
    /               reduce using rule 16 (exp -> exp * exp .)
    )               reduce using rule 16 (exp -> exp * exp .)
    ;               reduce using rule 16 (exp -> exp * exp .)

  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]


state 58

    (17) exp -> exp / exp .
    (14) exp -> exp . + exp
    (15) exp -> exp . - exp
    (16) exp -> exp . * exp
    (17) exp -> exp . / exp

    >               reduce using rule 17 (exp -> exp / exp .)
    <               reduce using rule 17 (exp -> exp / exp .)
    isEqual         reduce using rule 17 (exp -> exp / exp .)
    isNotEqual      reduce using rule 17 (exp -> exp / exp .)
    isEqualOrGreater reduce using rule 17 (exp -> exp / exp .)
    isEqualOrLess   reduce using rule 17 (exp -> exp / exp .)
    +               reduce using rule 17 (exp -> exp / exp .)
    -               reduce using rule 17 (exp -> exp / exp .)
    *               reduce using rule 17 (exp -> exp / exp .)
    /               reduce using rule 17 (exp -> exp / exp .)
    )               reduce using rule 17 (exp -> exp / exp .)
    ;               reduce using rule 17 (exp -> exp / exp .)

  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! *               [ shift and go to state 40 ]
  ! /               [ shift and go to state 41 ]


state 59

    (29) whileLoop -> while ( cond ) then . Instrucao end
    (3) Instrucao -> . ifStatement
    (4) Instrucao -> . whileLoop
    (5) Instrucao -> . atrib
    (6) Instrucao -> . nr
    (20) ifStatement -> . if ( cond ) then Instrucao end
    (21) ifStatement -> . if ( cond ) then Instrucao else Instrucao end
    (29) whileLoop -> . while ( cond ) then Instrucao end
    (7) atrib -> . int var ;
    (8) atrib -> . string var ;
    (9) atrib -> . int var = exp ;
    (10) atrib -> . string var = str ;
    (11) atrib -> . var = exp ;

    nr              shift and go to state 6
    if              shift and go to state 7
    while           shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 11
    var             shift and go to state 10

    Instrucao                      shift and go to state 63
    ifStatement                    shift and go to state 3
    whileLoop                      shift and go to state 4
    atrib                          shift and go to state 5

state 60

    (9) atrib -> int var = exp ; .

    nr              reduce using rule 9 (atrib -> int var = exp ; .)
    if              reduce using rule 9 (atrib -> int var = exp ; .)
    while           reduce using rule 9 (atrib -> int var = exp ; .)
    int             reduce using rule 9 (atrib -> int var = exp ; .)
    string          reduce using rule 9 (atrib -> int var = exp ; .)
    var             reduce using rule 9 (atrib -> int var = exp ; .)
    $end            reduce using rule 9 (atrib -> int var = exp ; .)
    end             reduce using rule 9 (atrib -> int var = exp ; .)
    else            reduce using rule 9 (atrib -> int var = exp ; .)


state 61

    (10) atrib -> string var = str ; .

    nr              reduce using rule 10 (atrib -> string var = str ; .)
    if              reduce using rule 10 (atrib -> string var = str ; .)
    while           reduce using rule 10 (atrib -> string var = str ; .)
    int             reduce using rule 10 (atrib -> string var = str ; .)
    string          reduce using rule 10 (atrib -> string var = str ; .)
    var             reduce using rule 10 (atrib -> string var = str ; .)
    $end            reduce using rule 10 (atrib -> string var = str ; .)
    end             reduce using rule 10 (atrib -> string var = str ; .)
    else            reduce using rule 10 (atrib -> string var = str ; .)


state 62

    (20) ifStatement -> if ( cond ) then Instrucao . end
    (21) ifStatement -> if ( cond ) then Instrucao . else Instrucao end

    end             shift and go to state 64
    else            shift and go to state 65


state 63

    (29) whileLoop -> while ( cond ) then Instrucao . end

    end             shift and go to state 66


state 64

    (20) ifStatement -> if ( cond ) then Instrucao end .

    nr              reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    if              reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    while           reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    int             reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    string          reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    var             reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    $end            reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    end             reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)
    else            reduce using rule 20 (ifStatement -> if ( cond ) then Instrucao end .)


state 65

    (21) ifStatement -> if ( cond ) then Instrucao else . Instrucao end
    (3) Instrucao -> . ifStatement
    (4) Instrucao -> . whileLoop
    (5) Instrucao -> . atrib
    (6) Instrucao -> . nr
    (20) ifStatement -> . if ( cond ) then Instrucao end
    (21) ifStatement -> . if ( cond ) then Instrucao else Instrucao end
    (29) whileLoop -> . while ( cond ) then Instrucao end
    (7) atrib -> . int var ;
    (8) atrib -> . string var ;
    (9) atrib -> . int var = exp ;
    (10) atrib -> . string var = str ;
    (11) atrib -> . var = exp ;

    nr              shift and go to state 6
    if              shift and go to state 7
    while           shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 11
    var             shift and go to state 10

    Instrucao                      shift and go to state 67
    ifStatement                    shift and go to state 3
    whileLoop                      shift and go to state 4
    atrib                          shift and go to state 5

state 66

    (29) whileLoop -> while ( cond ) then Instrucao end .

    nr              reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    if              reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    while           reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    int             reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    string          reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    var             reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    $end            reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    end             reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)
    else            reduce using rule 29 (whileLoop -> while ( cond ) then Instrucao end .)


state 67

    (21) ifStatement -> if ( cond ) then Instrucao else Instrucao . end

    end             shift and go to state 68


state 68

    (21) ifStatement -> if ( cond ) then Instrucao else Instrucao end .

    nr              reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    if              reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    while           reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    int             reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    string          reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    var             reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    $end            reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    end             reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)
    else            reduce using rule 21 (ifStatement -> if ( cond ) then Instrucao else Instrucao end .)

