Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    else
    end
    if
    isEqual
    isEqualOrGreater
    isEqualOrLess
    isNotEqual
    then
    while

Grammar

Rule 0     S' -> Rec
Rule 1     Rec -> PicoC
Rule 2     Rec -> Rec PicoC
Rule 3     PicoC -> Instrucao
Rule 4     Instrucao -> atrib
Rule 5     Instrucao -> nr
Rule 6     atrib -> int var ;
Rule 7     atrib -> string var ;
Rule 8     atrib -> int var = exp ;
Rule 9     atrib -> string var = str ;
Rule 10    exp -> var
Rule 11    exp -> nr
Rule 12    exp -> exp + exp
Rule 13    exp -> exp - exp
Rule 14    exp -> exp * exp
Rule 15    exp -> exp / exp
Rule 16    exp -> - exp
Rule 17    exp -> ( exp )

Terminals, with rules where they appear

(                    : 17
)                    : 17
*                    : 14
+                    : 12
-                    : 13 16
/                    : 15
;                    : 6 7 8 9
=                    : 8 9
else                 : 
end                  : 
error                : 
if                   : 
int                  : 6 8
isEqual              : 
isEqualOrGreater     : 
isEqualOrLess        : 
isNotEqual           : 
nr                   : 5 11
str                  : 9
string               : 7 9
then                 : 
var                  : 6 7 8 9 10
while                : 

Nonterminals, with rules where they appear

Instrucao            : 3
PicoC                : 1 2
Rec                  : 2 0
atrib                : 4
exp                  : 8 12 12 13 13 14 14 15 15 16 17

Parsing method: LALR

state 0

    (0) S' -> . Rec
    (1) Rec -> . PicoC
    (2) Rec -> . Rec PicoC
    (3) PicoC -> . Instrucao
    (4) Instrucao -> . atrib
    (5) Instrucao -> . nr
    (6) atrib -> . int var ;
    (7) atrib -> . string var ;
    (8) atrib -> . int var = exp ;
    (9) atrib -> . string var = str ;

    nr              shift and go to state 5
    int             shift and go to state 6
    string          shift and go to state 7

    Rec                            shift and go to state 1
    PicoC                          shift and go to state 2
    Instrucao                      shift and go to state 3
    atrib                          shift and go to state 4

state 1

    (0) S' -> Rec .
    (2) Rec -> Rec . PicoC
    (3) PicoC -> . Instrucao
    (4) Instrucao -> . atrib
    (5) Instrucao -> . nr
    (6) atrib -> . int var ;
    (7) atrib -> . string var ;
    (8) atrib -> . int var = exp ;
    (9) atrib -> . string var = str ;

    nr              shift and go to state 5
    int             shift and go to state 6
    string          shift and go to state 7

    PicoC                          shift and go to state 8
    Instrucao                      shift and go to state 3
    atrib                          shift and go to state 4

state 2

    (1) Rec -> PicoC .

    nr              reduce using rule 1 (Rec -> PicoC .)
    int             reduce using rule 1 (Rec -> PicoC .)
    string          reduce using rule 1 (Rec -> PicoC .)
    $end            reduce using rule 1 (Rec -> PicoC .)


state 3

    (3) PicoC -> Instrucao .

    nr              reduce using rule 3 (PicoC -> Instrucao .)
    int             reduce using rule 3 (PicoC -> Instrucao .)
    string          reduce using rule 3 (PicoC -> Instrucao .)
    $end            reduce using rule 3 (PicoC -> Instrucao .)


state 4

    (4) Instrucao -> atrib .

    nr              reduce using rule 4 (Instrucao -> atrib .)
    int             reduce using rule 4 (Instrucao -> atrib .)
    string          reduce using rule 4 (Instrucao -> atrib .)
    $end            reduce using rule 4 (Instrucao -> atrib .)


state 5

    (5) Instrucao -> nr .

    nr              reduce using rule 5 (Instrucao -> nr .)
    int             reduce using rule 5 (Instrucao -> nr .)
    string          reduce using rule 5 (Instrucao -> nr .)
    $end            reduce using rule 5 (Instrucao -> nr .)


state 6

    (6) atrib -> int . var ;
    (8) atrib -> int . var = exp ;

    var             shift and go to state 9


state 7

    (7) atrib -> string . var ;
    (9) atrib -> string . var = str ;

    var             shift and go to state 10


state 8

    (2) Rec -> Rec PicoC .

    nr              reduce using rule 2 (Rec -> Rec PicoC .)
    int             reduce using rule 2 (Rec -> Rec PicoC .)
    string          reduce using rule 2 (Rec -> Rec PicoC .)
    $end            reduce using rule 2 (Rec -> Rec PicoC .)


state 9

    (6) atrib -> int var . ;
    (8) atrib -> int var . = exp ;

    ;               shift and go to state 11
    =               shift and go to state 12


state 10

    (7) atrib -> string var . ;
    (9) atrib -> string var . = str ;

    ;               shift and go to state 13
    =               shift and go to state 14


state 11

    (6) atrib -> int var ; .

    nr              reduce using rule 6 (atrib -> int var ; .)
    int             reduce using rule 6 (atrib -> int var ; .)
    string          reduce using rule 6 (atrib -> int var ; .)
    $end            reduce using rule 6 (atrib -> int var ; .)


state 12

    (8) atrib -> int var = . exp ;
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 16

state 13

    (7) atrib -> string var ; .

    nr              reduce using rule 7 (atrib -> string var ; .)
    int             reduce using rule 7 (atrib -> string var ; .)
    string          reduce using rule 7 (atrib -> string var ; .)
    $end            reduce using rule 7 (atrib -> string var ; .)


state 14

    (9) atrib -> string var = . str ;

    str             shift and go to state 20


state 15

    (10) exp -> var .

    ;               reduce using rule 10 (exp -> var .)
    +               reduce using rule 10 (exp -> var .)
    -               reduce using rule 10 (exp -> var .)
    *               reduce using rule 10 (exp -> var .)
    /               reduce using rule 10 (exp -> var .)
    )               reduce using rule 10 (exp -> var .)


state 16

    (8) atrib -> int var = exp . ;
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 17

    (11) exp -> nr .

    ;               reduce using rule 11 (exp -> nr .)
    +               reduce using rule 11 (exp -> nr .)
    -               reduce using rule 11 (exp -> nr .)
    *               reduce using rule 11 (exp -> nr .)
    /               reduce using rule 11 (exp -> nr .)
    )               reduce using rule 11 (exp -> nr .)


state 18

    (16) exp -> - . exp
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 26

state 19

    (17) exp -> ( . exp )
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 27

state 20

    (9) atrib -> string var = str . ;

    ;               shift and go to state 28


state 21

    (8) atrib -> int var = exp ; .

    nr              reduce using rule 8 (atrib -> int var = exp ; .)
    int             reduce using rule 8 (atrib -> int var = exp ; .)
    string          reduce using rule 8 (atrib -> int var = exp ; .)
    $end            reduce using rule 8 (atrib -> int var = exp ; .)


state 22

    (12) exp -> exp + . exp
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 29

state 23

    (13) exp -> exp - . exp
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 30

state 24

    (14) exp -> exp * . exp
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 31

state 25

    (15) exp -> exp / . exp
    (10) exp -> . var
    (11) exp -> . nr
    (12) exp -> . exp + exp
    (13) exp -> . exp - exp
    (14) exp -> . exp * exp
    (15) exp -> . exp / exp
    (16) exp -> . - exp
    (17) exp -> . ( exp )

    var             shift and go to state 15
    nr              shift and go to state 17
    -               shift and go to state 18
    (               shift and go to state 19

    exp                            shift and go to state 32

state 26

    (16) exp -> - exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               reduce using rule 16 (exp -> - exp .)
    +               reduce using rule 16 (exp -> - exp .)
    -               reduce using rule 16 (exp -> - exp .)
    *               reduce using rule 16 (exp -> - exp .)
    /               reduce using rule 16 (exp -> - exp .)
    )               reduce using rule 16 (exp -> - exp .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 27

    (17) exp -> ( exp . )
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    )               shift and go to state 33
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 28

    (9) atrib -> string var = str ; .

    nr              reduce using rule 9 (atrib -> string var = str ; .)
    int             reduce using rule 9 (atrib -> string var = str ; .)
    string          reduce using rule 9 (atrib -> string var = str ; .)
    $end            reduce using rule 9 (atrib -> string var = str ; .)


state 29

    (12) exp -> exp + exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               reduce using rule 12 (exp -> exp + exp .)
    +               reduce using rule 12 (exp -> exp + exp .)
    -               reduce using rule 12 (exp -> exp + exp .)
    )               reduce using rule 12 (exp -> exp + exp .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 12 (exp -> exp + exp .) ]
  ! /               [ reduce using rule 12 (exp -> exp + exp .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 30

    (13) exp -> exp - exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               reduce using rule 13 (exp -> exp - exp .)
    +               reduce using rule 13 (exp -> exp - exp .)
    -               reduce using rule 13 (exp -> exp - exp .)
    )               reduce using rule 13 (exp -> exp - exp .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 13 (exp -> exp - exp .) ]
  ! /               [ reduce using rule 13 (exp -> exp - exp .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 31

    (14) exp -> exp * exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               reduce using rule 14 (exp -> exp * exp .)
    +               reduce using rule 14 (exp -> exp * exp .)
    -               reduce using rule 14 (exp -> exp * exp .)
    *               reduce using rule 14 (exp -> exp * exp .)
    /               reduce using rule 14 (exp -> exp * exp .)
    )               reduce using rule 14 (exp -> exp * exp .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 32

    (15) exp -> exp / exp .
    (12) exp -> exp . + exp
    (13) exp -> exp . - exp
    (14) exp -> exp . * exp
    (15) exp -> exp . / exp

    ;               reduce using rule 15 (exp -> exp / exp .)
    +               reduce using rule 15 (exp -> exp / exp .)
    -               reduce using rule 15 (exp -> exp / exp .)
    *               reduce using rule 15 (exp -> exp / exp .)
    /               reduce using rule 15 (exp -> exp / exp .)
    )               reduce using rule 15 (exp -> exp / exp .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 33

    (17) exp -> ( exp ) .

    ;               reduce using rule 17 (exp -> ( exp ) .)
    +               reduce using rule 17 (exp -> ( exp ) .)
    -               reduce using rule 17 (exp -> ( exp ) .)
    *               reduce using rule 17 (exp -> ( exp ) .)
    /               reduce using rule 17 (exp -> ( exp ) .)
    )               reduce using rule 17 (exp -> ( exp ) .)

